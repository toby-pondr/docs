{
	"openapi": "3.0.1",
	"info": {
	  "title": "Dynamic API Specification",
	  "description": "This is a dynamically generated API specification for all endpoints existing on the current project.",
	  "version": "10.10.4"
	},
	"servers": [
	  {
		"url": "https://library.taletwirlers.com",
		"description": "Your current Directus instance."
	  }
	],
	"paths": {
	  "/assets/{id}": {
		"get": {
		  "tags": [
			"Assets"
		  ],
		  "operationId": "getAsset",
		  "summary": "Get an Asset",
		  "description": "Image typed files can be dynamically resized and transformed to fit any need.",
		  "parameters": [
			{
			  "name": "id",
			  "in": "path",
			  "description": "The id of the file.",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "key",
			  "in": "query",
			  "description": "The key of the asset size configured in settings.",
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "transforms",
			  "in": "query",
			  "description": "A JSON array of image transformations",
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "download",
			  "in": "query",
			  "description": "Download the asset to your computer",
			  "schema": {
				"type": "boolean"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"text/plain": {
				  "schema": {
					"type": "string"
				  }
				}
			  }
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/auth/login": {
		"post": {
		  "summary": "Retrieve a Temporary Access Token",
		  "description": "Retrieve a Temporary Access Token",
		  "tags": [
			"Authentication"
		  ],
		  "operationId": "login",
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "required": [
					"email",
					"password"
				  ],
				  "properties": {
					"email": {
					  "type": "string",
					  "example": "admin@example.com",
					  "description": "Email address of the user you're retrieving the access token for."
					},
					"password": {
					  "type": "string",
					  "description": "Password of the user.",
					  "format": "password",
					  "example": "password"
					},
					"mode": {
					  "type": "string",
					  "enum": [
						"json",
						"cookie",
						"session"
					  ],
					  "default": "json",
					  "description": "Whether to retrieve the refresh token in the JSON response, or in a httpOnly cookie."
					},
					"otp": {
					  "type": "string",
					  "description": "The user's one-time-password (if MFA is enabled)."
					}
				  }
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Successful authentification",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"properties": {
						  "access_token": {
							"type": "string",
							"example": "eyJhbGciOiJI..."
						  },
						  "expires": {
							"type": "integer",
							"example": 900
						  },
						  "refresh_token": {
							"type": "string",
							"example": "yuOJkjdPXMd..."
						  }
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/auth/refresh": {
		"post": {
		  "summary": "Refresh Token",
		  "description": "Refresh a Temporary Access Token.",
		  "tags": [
			"Authentication"
		  ],
		  "operationId": "refresh",
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "properties": {
					"refresh_token": {
					  "type": "string",
					  "example": "eyJ0eXAiOiJKV...",
					  "description": "JWT access token you want to refresh. This token can't be expired."
					},
					"mode": {
					  "type": "string",
					  "enum": [
						"json",
						"cookie",
						"session"
					  ],
					  "default": "json",
					  "description": "Whether to submit and retrieve the refresh token in the JSON response, or in a httpOnly cookie."
					}
				  }
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"properties": {
						  "access_token": {
							"type": "string",
							"example": "eyJhbGciOiJI..."
						  },
						  "expires": {
							"type": "integer",
							"example": 900
						  },
						  "refresh_token": {
							"type": "string",
							"example": "Gy-caJMpmGTA..."
						  }
						}
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/auth/logout": {
		"post": {
		  "summary": "Log Out",
		  "description": "Log Out",
		  "tags": [
			"Authentication"
		  ],
		  "operationId": "logout",
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "properties": {
					"refresh_token": {
					  "type": "string",
					  "example": "eyJ0eXAiOiJKV...",
					  "description": "The refresh token to invalidate. If you have the refresh token in a cookie through /auth/login, you don't have to submit it here."
					},
					"mode": {
					  "type": "string",
					  "enum": [
						"json",
						"cookie",
						"session"
					  ],
					  "description": "Whether the refresh token is submitted in the JSON response, or in a httpOnly cookie."
					}
				  }
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Request successful"
			}
		  }
		}
	  },
	  "/auth/password/request": {
		"post": {
		  "tags": [
			"Authentication"
		  ],
		  "operationId": "passwordRequest",
		  "summary": "Request a Password Reset",
		  "description": "Request a reset password email to be send.",
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "required": [
					"email"
				  ],
				  "properties": {
					"email": {
					  "type": "string",
					  "example": "admin@example.com",
					  "description": "Email address of the user you're requesting a reset for."
					}
				  }
				}
			  }
			}
		  },
		  "responses": {
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/auth/password/reset": {
		"post": {
		  "tags": [
			"Authentication"
		  ],
		  "operationId": "passwordReset",
		  "summary": "Reset a Password",
		  "description": "The request a password reset endpoint sends an email with a link to the admin app which in turn uses this endpoint to allow the user to reset their password.",
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "required": [
					"token",
					"password"
				  ],
				  "properties": {
					"token": {
					  "type": "string",
					  "example": "eyJ0eXAiOiJKV1Qi...",
					  "description": "One-time use JWT token that is used to verify the user."
					},
					"password": {
					  "type": "string",
					  "example": "password",
					  "format": "password",
					  "description": "New password for the user."
					}
				  }
				}
			  }
			}
		  },
		  "responses": {
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/auth/oauth": {
		"get": {
		  "tags": [
			"Authentication"
		  ],
		  "operationId": "oauth",
		  "summary": "List OAuth Providers",
		  "description": "List configured OAuth providers.",
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "public": {
						"type": "boolean"
					  },
					  "data": {
						"type": "array",
						"example": [
						  "github",
						  "facebook"
						],
						"items": {
						  "type": "string"
						}
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/auth/oauth/{provider}": {
		"get": {
		  "summary": "Authenticated using an OAuth provider",
		  "description": "Start OAuth flow using the specified provider",
		  "tags": [
			"Authentication"
		  ],
		  "operationId": "oauthProvider",
		  "parameters": [
			{
			  "name": "provider",
			  "in": "path",
			  "description": "Key of the activated OAuth provider.",
			  "required": true,
			  "schema": {
				"type": "string"
			  }
			},
			{
			  "name": "redirect",
			  "in": "query",
			  "required": false,
			  "description": "Where to redirect on successful login.<br/>If set the authentication details are set inside cookies otherwise a JSON is returned.",
			  "schema": {
				"type": "string"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "public": {
						"type": "boolean"
					  },
					  "data": {
						"type": "object",
						"properties": {
						  "token": {
							"type": "string"
						  }
						}
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/server/info": {
		"get": {
		  "summary": "System Info",
		  "description": "Perform a system status check and return the options.",
		  "operationId": "serverInfo",
		  "parameters": [
			{
			  "description": "The first time you create a project, the provided token will be saved and required for subsequent project installs. It can also be found and configured in `/config/__api.json` on your server.",
			  "in": "query",
			  "name": "super_admin_token",
			  "required": true,
			  "schema": {
				"type": "integer"
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "content": {
				"application/json": {
				  "schema": {
					"properties": {
					  "data": {
						"type": "object"
					  }
					},
					"type": "object"
				  }
				}
			  },
			  "description": "Successful request"
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  },
		  "tags": [
			"Server"
		  ]
		}
	  },
	  "/server/ping": {
		"get": {
		  "summary": "Ping",
		  "description": "Ping, pong. Ping.. pong.",
		  "operationId": "ping",
		  "responses": {
			"200": {
			  "content": {
				"application/text": {
				  "schema": {
					"type": "string",
					"pattern": "pong",
					"example": "pong"
				  }
				}
			  },
			  "description": "Successful request"
			}
		  },
		  "tags": [
			"Server"
		  ]
		}
	  },
	  "/items/story": {
		"get": {
		  "summary": "List Items",
		  "description": "List the story items.",
		  "tags": [
			"Items",
			"ItemsStory"
		  ],
		  "operationId": "readItemsStory",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsStory"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		},
		"patch": {
		  "summary": "Update Multiple Items",
		  "description": "Update multiple story items at the same time.",
		  "tags": [
			"Items",
			"ItemsStory"
		  ],
		  "operationId": "updateItemsStory",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "oneOf": [
					{
					  "type": "array",
					  "items": {
						"$ref": "#/components/schemas/ItemsStory"
					  }
					},
					{
					  "$ref": "#/components/schemas/ItemsStory"
					}
				  ]
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"properties": {
					  "data": {
						"items": {
						  "$ref": "#/components/schemas/ItemsStory"
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/items/story/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single story item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsStory"
		  ],
		  "operationId": "readSingleItemsStory",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsStory"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		},
		"patch": {
		  "summary": "Update an Item",
		  "description": "Update an existing story item.",
		  "tags": [
			"Items",
			"ItemsStory"
		  ],
		  "operationId": "updateSingleItemsStory",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "$ref": "#/components/schemas/ItemsStory"
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsStory"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/items/story_category": {
		"get": {
		  "summary": "List Items",
		  "description": "List the story_category items.",
		  "tags": [
			"Items",
			"ItemsStoryCategory"
		  ],
		  "operationId": "readItemsStoryCategory",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsStoryCategory"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/story_category/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single story_category item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsStoryCategory"
		  ],
		  "operationId": "readSingleItemsStoryCategory",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsStoryCategory"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/items/category": {
		"get": {
		  "summary": "List Items",
		  "description": "List the category items.",
		  "tags": [
			"Items",
			"ItemsCategory"
		  ],
		  "operationId": "readItemsCategory",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsCategory"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/category/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single category item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsCategory"
		  ],
		  "operationId": "readSingleItemsCategory",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsCategory"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/files": {
		"get": {
		  "summary": "List Files",
		  "description": "List the files.",
		  "tags": [
			"Files"
		  ],
		  "operationId": "getFiles",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "$ref": "#/components/schemas/Files"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/files/{id}": {
		"get": {
		  "summary": "Retrieve a Files",
		  "description": "Retrieve a single file by unique identifier.",
		  "tags": [
			"Files"
		  ],
		  "operationId": "getFile",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/UUId"
			},
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"$ref": "#/components/schemas/Files"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/step": {
		"get": {
		  "summary": "List Items",
		  "description": "List the step items.",
		  "tags": [
			"Items",
			"ItemsStep"
		  ],
		  "operationId": "readItemsStep",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsStep"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/step/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single step item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsStep"
		  ],
		  "operationId": "readSingleItemsStep",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsStep"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/items/criteria": {
		"get": {
		  "summary": "List Items",
		  "description": "List the criteria items.",
		  "tags": [
			"Items",
			"ItemsCriteria"
		  ],
		  "operationId": "readItemsCriteria",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsCriteria"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/criteria/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single criteria item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsCriteria"
		  ],
		  "operationId": "readSingleItemsCriteria",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsCriteria"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/items/step_criteria": {
		"get": {
		  "summary": "List Items",
		  "description": "List the step_criteria items.",
		  "tags": [
			"Items",
			"ItemsStepCriteria"
		  ],
		  "operationId": "readItemsStepCriteria",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsStepCriteria"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/step_criteria/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single step_criteria item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsStepCriteria"
		  ],
		  "operationId": "readSingleItemsStepCriteria",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsStepCriteria"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/items/seo": {
		"get": {
		  "summary": "List Items",
		  "description": "List the seo items.",
		  "tags": [
			"Items",
			"ItemsSEO"
		  ],
		  "operationId": "readItemsSEO",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsSEO"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/seo/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single seo item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsSEO"
		  ],
		  "operationId": "readSingleItemsSEO",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsSEO"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/items/page_option": {
		"get": {
		  "summary": "List Items",
		  "description": "List the page_option items.",
		  "tags": [
			"Items",
			"ItemsPageOption"
		  ],
		  "operationId": "readItemsPageOption",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsPageOption"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/page_option/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single page_option item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsPageOption"
		  ],
		  "operationId": "readSingleItemsPageOption",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsPageOption"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/items/story_directus_users": {
		"get": {
		  "summary": "List Items",
		  "description": "List the story_directus_users items.",
		  "tags": [
			"Items",
			"ItemsStoryDirectusUsers"
		  ],
		  "operationId": "readItemsStoryDirectusUsers",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsStoryDirectusUsers"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		},
		"patch": {
		  "summary": "Update Multiple Items",
		  "description": "Update multiple story_directus_users items at the same time.",
		  "tags": [
			"Items",
			"ItemsStoryDirectusUsers"
		  ],
		  "operationId": "updateItemsStoryDirectusUsers",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "oneOf": [
					{
					  "type": "array",
					  "items": {
						"$ref": "#/components/schemas/ItemsStoryDirectusUsers"
					  }
					},
					{
					  "$ref": "#/components/schemas/ItemsStoryDirectusUsers"
					}
				  ]
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"properties": {
					  "data": {
						"items": {
						  "$ref": "#/components/schemas/ItemsStoryDirectusUsers"
						}
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "/items/story_directus_users/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single story_directus_users item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsStoryDirectusUsers"
		  ],
		  "operationId": "readSingleItemsStoryDirectusUsers",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsStoryDirectusUsers"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		},
		"patch": {
		  "summary": "Update an Item",
		  "description": "Update an existing story_directus_users item.",
		  "tags": [
			"Items",
			"ItemsStoryDirectusUsers"
		  ],
		  "operationId": "updateSingleItemsStoryDirectusUsers",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "$ref": "#/components/schemas/ItemsStoryDirectusUsers"
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsStoryDirectusUsers"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/users": {
		"post": {
		  "summary": "Create a User",
		  "description": "Create a new user.",
		  "operationId": "createUser",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Meta"
			}
		  ],
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "$ref": "#/components/schemas/Users"
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"$ref": "#/components/schemas/Users"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  },
		  "tags": [
			"Users"
		  ]
		}
	  },
	  "/users/{id}": {},
	  "/users/invite": {
		"post": {
		  "summary": "Invite User(s)",
		  "description": "Invites one or more users to this project. It creates a user with an invited status, and then sends an email to the user with instructions on how to activate their account.",
		  "operationId": "invite",
		  "requestBody": {
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "properties": {
					"email": {
					  "description": "Email address or array of email addresses of the to-be-invited user(s).",
					  "type": "string"
					}
				  }
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"$ref": "#/components/schemas/Users"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  },
		  "tags": [
			"Users"
		  ]
		}
	  },
	  "/users/invite/accept": {
		"post": {
		  "summary": "Accept User Invite",
		  "description": "Accepts and enables an invited user using a JWT invitation token.",
		  "operationId": "acceptInvite",
		  "requestBody": {
			"required": true,
			"content": {
			  "application/json": {
				"schema": {
				  "type": "object",
				  "properties": {
					"token": {
					  "type": "string",
					  "example": "eyJh...KmUk",
					  "description": "Accept invite token."
					},
					"password": {
					  "type": "string",
					  "description": "Password of the user.",
					  "format": "password",
					  "example": "d1r3ctu5"
					}
				  }
				}
			  }
			}
		  },
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"$ref": "#/components/schemas/Users"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  },
		  "tags": [
			"Users"
		  ]
		}
	  },
	  "/users/me": {},
	  "/users/me/track/page": {},
	  "/users/me/tfa/enable": {
		"post": {
		  "summary": "Enable 2FA",
		  "description": "Enables two-factor authentication for the currently authenticated user.",
		  "operationId": "meTfaEnable",
		  "responses": {
			"200": {
			  "description": "Successful request"
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  },
		  "tags": [
			"Users"
		  ]
		}
	  },
	  "/users/me/tfa/disable": {
		"post": {
		  "summary": "Disable 2FA",
		  "description": "Disables two-factor authentication for the currently authenticated user.",
		  "operationId": "meTfaDisable",
		  "responses": {
			"200": {
			  "description": "Successful request"
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  },
		  "tags": [
			"Users"
		  ]
		}
	  },
	  "/items/criteria_type": {
		"get": {
		  "summary": "List Items",
		  "description": "List the criteria_type items.",
		  "tags": [
			"Items",
			"ItemsCriteriaType"
		  ],
		  "operationId": "readItemsCriteriaType",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsCriteriaType"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/criteria_type/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single criteria_type item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsCriteriaType"
		  ],
		  "operationId": "readSingleItemsCriteriaType",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsCriteriaType"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/items/create_story_flow": {
		"get": {
		  "summary": "List Items",
		  "description": "List the create_story_flow items.",
		  "tags": [
			"Items",
			"ItemsCreateStoryFlow"
		  ],
		  "operationId": "readItemsCreateStoryFlow",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsCreateStoryFlow"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/create_story_flow/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single create_story_flow item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsCreateStoryFlow"
		  ],
		  "operationId": "readSingleItemsCreateStoryFlow",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsCreateStoryFlow"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  },
	  "/items/page": {
		"get": {
		  "summary": "List Items",
		  "description": "List the page items.",
		  "tags": [
			"Items",
			"ItemsPage"
		  ],
		  "operationId": "readItemsPage",
		  "security": [
			{
			  "Auth": []
			}
		  ],
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Limit"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Offset"
			},
			{
			  "$ref": "#/components/parameters/Sort"
			},
			{
			  "$ref": "#/components/parameters/Filter"
			},
			{
			  "$ref": "#/components/parameters/Search"
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "array",
						"items": {
						  "type": "object",
						  "$ref": "#/components/schemas/ItemsPage"
						}
					  },
					  "meta": {
						"$ref": "#/components/schemas/x-metadata"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			}
		  }
		}
	  },
	  "/items/page/{id}": {
		"get": {
		  "summary": "Retrieve an Item",
		  "description": "Retrieve a single page item by unique identifier.",
		  "tags": [
			"Items",
			"ItemsPage"
		  ],
		  "operationId": "readSingleItemsPage",
		  "parameters": [
			{
			  "$ref": "#/components/parameters/Fields"
			},
			{
			  "$ref": "#/components/parameters/Meta"
			},
			{
			  "$ref": "#/components/parameters/Version"
			},
			{
			  "name": "id",
			  "description": "Index of the item.",
			  "in": "path",
			  "required": true,
			  "schema": {
				"oneOf": [
				  {
					"type": "integer",
					"description": "Incremental index of the item.",
					"example": 1
				  },
				  {
					"type": "string",
					"description": "Unique identifier of the item.",
					"example": "8cbb43fe-4cdf-4991-8352-c461779cec02"
				  }
				]
			  }
			}
		  ],
		  "responses": {
			"200": {
			  "description": "Successful request",
			  "content": {
				"application/json": {
				  "schema": {
					"type": "object",
					"properties": {
					  "data": {
						"type": "object",
						"$ref": "#/components/schemas/ItemsPage"
					  }
					}
				  }
				}
			  }
			},
			"401": {
			  "$ref": "#/components/responses/UnauthorizedError"
			},
			"404": {
			  "$ref": "#/components/responses/NotFoundError"
			}
		  }
		}
	  }
	},
	"tags": [
	  {
		"name": "Assets",
		"description": "Image typed files can be dynamically resized and transformed to fit any need."
	  },
	  {
		"name": "Authentication",
		"description": "All data within the platform is private by default. The public role can be configured to expose data without authentication, or you can pass an access token to the API to access private data."
	  },
	  {
		"name": "Server",
		"description": "Access to where Directus runs. Allows you to make sure your server has everything needed to run the platform, and check what kind of latency we're dealing with."
	  },
	  {
		"name": "ItemsStory",
		"x-collection": "story"
	  },
	  {
		"name": "ItemsStoryCategory",
		"x-collection": "story_category"
	  },
	  {
		"name": "ItemsCategory",
		"x-collection": "category"
	  },
	  {
		"name": "Files",
		"description": "Files can be saved in any given location. Directus has a powerful assets endpoint that can be used to generate thumbnails for images on the fly.",
		"x-collection": "directus_files"
	  },
	  {
		"name": "ItemsStep",
		"x-collection": "step"
	  },
	  {
		"name": "ItemsCriteria",
		"x-collection": "criteria"
	  },
	  {
		"name": "ItemsStepCriteria",
		"x-collection": "step_criteria"
	  },
	  {
		"name": "ItemsSEO",
		"x-collection": "seo"
	  },
	  {
		"name": "ItemsPageOption",
		"x-collection": "page_option"
	  },
	  {
		"name": "ItemsStoryDirectusUsers",
		"x-collection": "story_directus_users"
	  },
	  {
		"name": "Users",
		"description": "Users are what gives you access to the data.",
		"x-collection": "directus_users"
	  },
	  {
		"name": "ItemsCriteriaType",
		"x-collection": "criteria_type"
	  },
	  {
		"name": "ItemsCreateStoryFlow",
		"x-collection": "create_story_flow"
	  },
	  {
		"name": "ItemsPage",
		"x-collection": "page"
	  }
	],
	"components": {
	  "schemas": {
		"Query": {
		  "type": "object",
		  "properties": {
			"fields": {
			  "type": "array",
			  "items": {
				"type": "string"
			  },
			  "description": "Control what fields are being returned in the object.",
			  "example": [
				"*",
				"*.*"
			  ]
			},
			"filter": {
			  "type": "object",
			  "example": {
				"<field>": {
				  "<operator>": "<value>"
				}
			  }
			},
			"search": {
			  "description": "Filter by items that contain the given search query in one of their fields.",
			  "type": "string"
			},
			"sort": {
			  "type": "array",
			  "items": {
				"type": "string"
			  },
			  "description": "How to sort the returned items.",
			  "example": [
				"-date_created"
			  ]
			},
			"limit": {
			  "type": "number",
			  "description": "Set the maximum number of items that will be returned"
			},
			"offset": {
			  "type": "number",
			  "description": "How many items to skip when fetching data."
			},
			"page": {
			  "type": "number",
			  "description": "Cursor for use in pagination. Often used in combination with limit."
			},
			"deep": {
			  "type": "object",
			  "description": "Deep allows you to set any of the other query parameters on a nested relational dataset.",
			  "example": {
				"related_articles": {
				  "_limit": 3
				}
			  }
			}
		  }
		},
		"x-metadata": {
		  "type": "object",
		  "properties": {
			"total_count": {
			  "description": "Returns the total item count of the collection you're querying.",
			  "type": "integer"
			},
			"filter_count": {
			  "description": "Returns the item count of the collection you're querying, taking the current filter/search parameters into account.",
			  "type": "integer"
			}
		  }
		},
		"ItemsStory": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"status": {
			  "nullable": false,
			  "type": "string"
			},
			"date_created": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"date_updated": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"title": {
			  "nullable": true,
			  "type": "string"
			},
			"image": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "string",
				  "format": "uuid"
				},
				{
				  "$ref": "#/components/schemas/Files"
				}
			  ]
			},
			"slug": {
			  "nullable": true,
			  "type": "string"
			},
			"seo": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsSEO"
				}
			  ]
			},
			"tags": {
			  "nullable": true,
			  "type": "array",
			  "items": {
				"type": "string"
			  }
			},
			"category": {
			  "nullable": true,
			  "type": "array",
			  "items": {
				"oneOf": [
				  {
					"type": "integer"
				  },
				  {
					"$ref": "#/components/schemas/ItemsStoryCategory"
				  }
				]
			  }
			},
			"pages": {
			  "nullable": true,
			  "type": "array",
			  "items": {
				"oneOf": [
				  {
					"type": "integer"
				  },
				  {
					"$ref": "#/components/schemas/ItemsPage"
				  }
				]
			  }
			},
			"users": {
			  "nullable": true,
			  "type": "array",
			  "items": {
				"oneOf": [
				  {
					"type": "integer"
				  },
				  {
					"$ref": "#/components/schemas/ItemsStoryDirectusUsers"
				  }
				]
			  }
			}
		  },
		  "x-collection": "story"
		},
		"ItemsStoryCategory": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"story_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsStory"
				}
			  ]
			},
			"category_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsCategory"
				}
			  ]
			}
		  },
		  "x-collection": "story_category"
		},
		"ItemsCategory": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"status": {
			  "nullable": false,
			  "type": "string"
			},
			"date_created": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"date_updated": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"title": {
			  "nullable": true,
			  "type": "string"
			},
			"image": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "string",
				  "format": "uuid"
				},
				{
				  "$ref": "#/components/schemas/Files"
				}
			  ]
			},
			"seo": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsSEO"
				}
			  ]
			},
			"summary": {
			  "nullable": true,
			  "type": "string"
			},
			"slug": {
			  "nullable": true,
			  "type": "string"
			}
		  },
		  "x-collection": "category"
		},
		"Files": {
		  "type": "object",
		  "properties": {
			"id": {
			  "description": "Unique identifier for the file.",
			  "example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
			  "type": "string"
			},
			"storage": {
			  "description": "Where the file is stored. Either `local` for the local filesystem or the name of the storage adapter (for example `s3`).",
			  "example": "local",
			  "type": "string"
			},
			"filename_disk": {
			  "description": "Name of the file on disk. By default, Directus uses a random hash for the filename.",
			  "example": "a88c3b72-ac58-5436-a4ec-b2858531333a.jpg",
			  "type": "string"
			},
			"filename_download": {
			  "description": "How you want to the file to be named when it's being downloaded.",
			  "example": "avatar.jpg",
			  "type": "string"
			},
			"title": {
			  "description": "Title for the file. Is extracted from the filename on upload, but can be edited by the user.",
			  "example": "User Avatar",
			  "type": "string"
			},
			"type": {
			  "description": "MIME type of the file.",
			  "example": "image/jpeg",
			  "type": "string"
			},
			"uploaded_by": {
			  "description": "Who uploaded the file.",
			  "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
			  "oneOf": [
				{
				  "type": "string"
				},
				{
				  "$ref": "#/components/schemas/Users"
				}
			  ]
			},
			"uploaded_on": {
			  "description": "When the file was uploaded.",
			  "example": "2019-12-03T00:10:15+00:00",
			  "type": "string",
			  "format": "date-time"
			},
			"modified_by": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "string",
				  "format": "uuid"
				},
				{
				  "$ref": "#/components/schemas/Users"
				}
			  ]
			},
			"modified_on": {
			  "nullable": false,
			  "type": "string",
			  "format": "timestamp"
			},
			"charset": {
			  "description": "Character set of the file.",
			  "example": "binary",
			  "type": "string",
			  "nullable": true
			},
			"filesize": {
			  "description": "Size of the file in bytes.",
			  "example": 137862,
			  "type": "integer"
			},
			"width": {
			  "description": "Width of the file in pixels. Only applies to images.",
			  "example": 800,
			  "type": "integer",
			  "nullable": true
			},
			"height": {
			  "description": "Height of the file in pixels. Only applies to images.",
			  "example": 838,
			  "type": "integer",
			  "nullable": true
			},
			"duration": {
			  "description": "Duration of the file in seconds. Only applies to audio and video.",
			  "example": 0,
			  "type": "integer",
			  "nullable": true
			},
			"embed": {
			  "description": "Where the file was embedded from.",
			  "example": null,
			  "type": "string",
			  "nullable": true
			},
			"description": {
			  "description": "Description for the file.",
			  "type": "string",
			  "nullable": true
			},
			"location": {
			  "description": "Where the file was created. Is automatically populated based on Exif data for images.",
			  "type": "string",
			  "nullable": true
			},
			"tags": {
			  "description": "Tags for the file. Is automatically populated based on Exif data for images.",
			  "type": "array",
			  "nullable": true,
			  "items": {
				"type": "string"
			  }
			},
			"metadata": {
			  "description": "IPTC, Exif, and ICC metadata extracted from file",
			  "type": "object",
			  "nullable": true
			},
			"focal_point_x": {
			  "nullable": true,
			  "type": "integer"
			},
			"focal_point_y": {
			  "nullable": true,
			  "type": "integer"
			},
			"voice": {
			  "nullable": true,
			  "type": "string"
			},
			"source": {
			  "nullable": true,
			  "type": "string"
			}
		  },
		  "x-collection": "directus_files"
		},
		"ItemsStep": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"date_created": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"date_updated": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"step_order": {
			  "nullable": true,
			  "type": "integer"
			},
			"criteria_type": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsCriteriaType"
				}
			  ]
			},
			"create_story_flow_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsCreateStoryFlow"
				}
			  ]
			},
			"title": {
			  "nullable": true,
			  "type": "string"
			},
			"dependancy": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsStep"
				}
			  ]
			},
			"criteria_choices": {
			  "nullable": true,
			  "type": "array",
			  "items": {
				"oneOf": [
				  {
					"type": "integer"
				  },
				  {
					"$ref": "#/components/schemas/ItemsStepCriteria"
				  }
				]
			  }
			}
		  },
		  "x-collection": "step"
		},
		"ItemsCriteria": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"description": {
			  "nullable": true,
			  "type": "string"
			},
			"criteria_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsCriteria"
				}
			  ]
			},
			"title": {
			  "nullable": true,
			  "type": "string"
			},
			"type": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsCriteriaType"
				}
			  ]
			},
			"image": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "string",
				  "format": "uuid"
				},
				{
				  "$ref": "#/components/schemas/Files"
				}
			  ]
			}
		  },
		  "x-collection": "criteria"
		},
		"ItemsStepCriteria": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"step_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsStep"
				}
			  ]
			},
			"criteria_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsCriteria"
				}
			  ]
			}
		  },
		  "x-collection": "step_criteria"
		},
		"ItemsSEO": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"title": {
			  "nullable": true,
			  "type": "string"
			},
			"meta_description": {
			  "nullable": true,
			  "type": "string"
			},
			"canonical_url": {
			  "nullable": true,
			  "type": "string"
			},
			"no_index": {
			  "nullable": true,
			  "type": "boolean"
			},
			"no_follow": {
			  "nullable": true,
			  "type": "boolean"
			},
			"og_image": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "string",
				  "format": "uuid"
				},
				{
				  "$ref": "#/components/schemas/Files"
				}
			  ]
			},
			"sitemap_change_frequency": {
			  "nullable": true,
			  "type": "string"
			},
			"sitemap_priority": {
			  "nullable": true,
			  "type": "number"
			},
			"seo_text": {
			  "nullable": true,
			  "type": "string"
			}
		  },
		  "x-collection": "seo"
		},
		"ItemsPageOption": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"date_created": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"text": {
			  "nullable": true,
			  "type": "string"
			},
			"next_page": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsPage"
				}
			  ]
			},
			"status": {
			  "nullable": false,
			  "type": "string"
			},
			"page_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsPage"
				}
			  ]
			}
		  },
		  "x-collection": "page_option"
		},
		"ItemsStoryDirectusUsers": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"story_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsStory"
				}
			  ]
			},
			"directus_users_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "string",
				  "format": "uuid"
				},
				{
				  "$ref": "#/components/schemas/Users"
				}
			  ]
			},
			"date_created": {
			  "nullable": true,
			  "type": "string",
			  "format": "date-time"
			},
			"status": {
			  "nullable": true,
			  "type": "string"
			},
			"current_page": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsPage"
				}
			  ]
			}
		  },
		  "x-collection": "story_directus_users"
		},
		"Users": {
		  "type": "object",
		  "properties": {
			"id": {
			  "description": "Unique identifier for the user.",
			  "example": "63716273-0f29-4648-8a2a-2af2948f6f78",
			  "type": "string"
			},
			"first_name": {
			  "description": "First name of the user.",
			  "example": "Admin",
			  "type": "string"
			},
			"last_name": {
			  "description": "Last name of the user.",
			  "example": "User",
			  "type": "string"
			},
			"email": {
			  "description": "Unique email address for the user.",
			  "example": "admin@example.com",
			  "type": "string",
			  "format": "email"
			},
			"password": {
			  "description": "Password of the user.",
			  "type": "string"
			},
			"location": {
			  "description": "The user's location.",
			  "example": null,
			  "type": "string",
			  "nullable": true
			},
			"title": {
			  "description": "The user's title.",
			  "example": null,
			  "type": "string",
			  "nullable": true
			},
			"description": {
			  "description": "The user's description.",
			  "example": null,
			  "type": "string",
			  "nullable": true
			},
			"tags": {
			  "description": "The user's tags.",
			  "example": null,
			  "type": "array",
			  "nullable": true,
			  "items": {
				"type": "string"
			  }
			},
			"avatar": {
			  "description": "The user's avatar.",
			  "example": null,
			  "oneOf": [
				{
				  "type": "string"
				},
				{
				  "$ref": "#/components/schemas/Files"
				}
			  ],
			  "nullable": true
			},
			"language": {
			  "description": "The user's language used in Directus.",
			  "example": "en-US",
			  "type": "string"
			},
			"tfa_secret": {
			  "description": "The 2FA secret string that's used to generate one time passwords.",
			  "example": null,
			  "type": "string",
			  "nullable": true
			},
			"status": {
			  "description": "Status of the user.",
			  "example": "active",
			  "type": "string",
			  "enum": [
				"active",
				"invited",
				"draft",
				"suspended",
				"deleted"
			  ]
			},
			"token": {
			  "description": "Static token for the user.",
			  "type": "string",
			  "nullable": true
			},
			"last_access": {
			  "description": "When this user used the API last.",
			  "example": "2020-05-31T14:32:37Z",
			  "type": "string",
			  "nullable": true,
			  "format": "date-time"
			},
			"last_page": {
			  "description": "Last page that the user was on.",
			  "example": "/my-project/settings/collections/a",
			  "type": "string",
			  "nullable": true
			},
			"provider": {
			  "nullable": false,
			  "type": "string"
			},
			"external_identifier": {
			  "nullable": true,
			  "type": "string"
			},
			"auth_data": {
			  "nullable": true,
			  "type": "string"
			},
			"email_notifications": {
			  "nullable": true,
			  "type": "boolean"
			},
			"appearance": {
			  "nullable": true,
			  "type": "string"
			},
			"theme_dark": {
			  "nullable": true,
			  "type": "string"
			},
			"theme_light": {
			  "nullable": true,
			  "type": "string"
			},
			"theme_light_overrides": {
			  "nullable": true
			},
			"theme_dark_overrides": {
			  "nullable": true
			},
			"stories": {
			  "nullable": true,
			  "type": "array",
			  "items": {
				"oneOf": [
				  {
					"type": "integer"
				  },
				  {
					"$ref": "#/components/schemas/ItemsStoryDirectusUsers"
				  }
				]
			  }
			}
		  },
		  "x-collection": "directus_users"
		},
		"ItemsCriteriaType": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"date_created": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"date_updated": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"title": {
			  "nullable": true,
			  "type": "string"
			}
		  },
		  "x-collection": "criteria_type"
		},
		"ItemsCreateStoryFlow": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"date_created": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"date_updated": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"title": {
			  "nullable": true,
			  "type": "string"
			},
			"is_default": {
			  "nullable": true,
			  "type": "boolean"
			},
			"steps": {
			  "nullable": true,
			  "type": "array",
			  "items": {
				"oneOf": [
				  {
					"type": "integer"
				  },
				  {
					"$ref": "#/components/schemas/ItemsStep"
				  }
				]
			  }
			}
		  },
		  "x-collection": "create_story_flow"
		},
		"ItemsPage": {
		  "type": "object",
		  "properties": {
			"id": {
			  "nullable": false,
			  "type": "integer"
			},
			"date_created": {
			  "nullable": true,
			  "type": "string",
			  "format": "timestamp"
			},
			"image": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "string",
				  "format": "uuid"
				},
				{
				  "$ref": "#/components/schemas/Files"
				}
			  ]
			},
			"page_number": {
			  "nullable": true,
			  "type": "integer"
			},
			"story_id": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsStory"
				}
			  ]
			},
			"next_page": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsPage"
				}
			  ]
			},
			"previous_page": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "integer"
				},
				{
				  "$ref": "#/components/schemas/ItemsPage"
				}
			  ]
			},
			"text": {
			  "nullable": true,
			  "type": "string"
			},
			"audio": {
			  "nullable": true,
			  "oneOf": [
				{
				  "type": "string",
				  "format": "uuid"
				},
				{
				  "$ref": "#/components/schemas/Files"
				}
			  ]
			}
		  },
		  "x-collection": "page"
		}
	  },
	  "parameters": {
		"Id": {
		  "description": "Index",
		  "name": "id",
		  "in": "path",
		  "required": true,
		  "schema": {
			"type": "integer"
		  }
		},
		"UUId": {
		  "description": "Unique identifier for the object.",
		  "name": "id",
		  "in": "path",
		  "required": true,
		  "schema": {
			"example": "8cbb43fe-4cdf-4991-8352-c461779cec02",
			"type": "string"
		  }
		},
		"Collection": {
		  "description": "Collection of which you want to retrieve the items from.",
		  "name": "collection",
		  "in": "path",
		  "required": true,
		  "schema": {
			"type": "string"
		  }
		},
		"Search": {
		  "description": "Filter by items that contain the given search query in one of their fields.",
		  "in": "query",
		  "name": "search",
		  "required": false,
		  "schema": {
			"type": "string"
		  }
		},
		"Page": {
		  "description": "Cursor for use in pagination. Often used in combination with limit.",
		  "in": "query",
		  "name": "page",
		  "required": false,
		  "schema": {
			"type": "integer"
		  }
		},
		"Offset": {
		  "description": "How many items to skip when fetching data.",
		  "in": "query",
		  "name": "offset",
		  "required": false,
		  "schema": {
			"type": "integer"
		  }
		},
		"Sort": {
		  "description": "How to sort the returned items. `sort` is a CSV of fields used to sort the fetched items. Sorting defaults to ascending (ASC) order but a minus sign (` - `) can be used to reverse this to descending (DESC) order. Fields are prioritized by their order in the CSV. You can also use a ` ? ` to sort randomly.\n",
		  "in": "query",
		  "name": "sort",
		  "required": false,
		  "explode": false,
		  "schema": {
			"type": "array",
			"items": {
			  "type": "string"
			}
		  }
		},
		"Meta": {
		  "description": "What metadata to return in the response.",
		  "in": "query",
		  "name": "meta",
		  "required": false,
		  "schema": {
			"type": "string"
		  }
		},
		"Limit": {
		  "description": "A limit on the number of objects that are returned.",
		  "in": "query",
		  "name": "limit",
		  "required": false,
		  "schema": {
			"type": "integer"
		  }
		},
		"Filter": {
		  "description": "Select items in collection by given conditions.",
		  "in": "query",
		  "name": "filter",
		  "required": false,
		  "content": {
			"application/json": {
			  "schema": {
				"type": "object",
				"example": {
				  "<field>": {
					"<operator>": "<value>"
				  }
				}
			  }
			}
		  }
		},
		"Fields": {
		  "description": "Control what fields are being returned in the object.",
		  "in": "query",
		  "name": "fields",
		  "required": false,
		  "explode": false,
		  "schema": {
			"type": "array",
			"items": {
			  "type": "string"
			}
		  }
		},
		"Export": {
		  "name": "export",
		  "description": "Saves the API response to a file. Accepts one of \"csv\", \"json\", \"xml\", \"yaml\".",
		  "in": "query",
		  "required": false,
		  "schema": {
			"type": "string",
			"enum": [
			  "csv",
			  "json",
			  "xml",
			  "yaml"
			]
		  }
		},
		"Version": {
		  "name": "version",
		  "description": "Retrieve an item's state from a specific Content Version. The value corresponds to the \"key\" of the Content Version.\n",
		  "in": "query",
		  "required": false,
		  "schema": {
			"type": "string"
		  }
		}
	  },
	  "responses": {
		"NotFoundError": {
		  "description": "Error: Not found.",
		  "content": {
			"application/json": {
			  "schema": {
				"type": "object",
				"properties": {
				  "error": {
					"type": "object",
					"properties": {
					  "code": {
						"type": "integer",
						"format": "int64"
					  },
					  "message": {
						"type": "string"
					  }
					}
				  }
				}
			  }
			}
		  }
		},
		"UnauthorizedError": {
		  "description": "Error: Unauthorized request",
		  "content": {
			"application/json": {
			  "schema": {
				"type": "object",
				"properties": {
				  "error": {
					"type": "object",
					"properties": {
					  "code": {
						"type": "integer",
						"format": "int64"
					  },
					  "message": {
						"type": "string"
					  }
					}
				  }
				}
			  }
			}
		  }
		}
	  },
	  "securitySchemes": {
		"KeyAuth": {
		  "type": "apiKey",
		  "in": "query",
		  "name": "access_token"
		},
		"Auth": {
		  "type": "apiKey",
		  "in": "header",
		  "name": "Authorization"
		}
	  }
	}
  }